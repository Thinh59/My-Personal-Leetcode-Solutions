#177

import pandas as pd

employee = pd.DataFrame({"id" : [1, 2, 3], "salary" : [100, 200, 300]})
n = 3
def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:
    sorted = employee["salary"].sort_values(ascending = False).drop_duplicates()
    #Không thể thay sortd = employee["Rank"] vì khi drop_duplicates sẽ gây ra tình trạng thiếu dòng và không khớp với DataFrame

    if N < 1 or N > len(sorted):
        return pd.DataFrame({f"getNthHighestSalary({N})" : [None]})
    
    res = sorted.iloc[N - 1]

    return pd.DataFrame({f"getNthHighestSalary({N})" : [res]})

print(nth_highest_salary(employee, n))


#511

import pandas as pd

activity = pd.DataFrame({"player_id" : [1, 1, 2, 3, 3], "device_id" : [2, 2, 3, 1, 4], "event_date" : ["2016-03-01", "2016-05-02", "2017-06-25", "2016-03-02", "2018-07-03"], "games_played" : [5, 6, 1, 0, 5]})
def game_analysis(activity: pd.DataFrame) -> pd.DataFrame:
    """res = activity.sort_values(by = "event_date")
    res = res.groupby(by = "player_id").head(1).reset_index()
    return res.sort_values(by = "player_id")[["player_id", "event_date"]].rename(columns = {"event_date" : "first_login"})"""
    return activity.groupby("player_id")["event_date"].min().reset_index(name = "first_login")
print(game_analysis(activity))


#570
import pandas as pd

data = [
    {"id": 101, "name": "John", "department": "A", "managerId": None},
    {"id": 102, "name": "Dan", "department": "A", "managerId": 101},
    {"id": 103, "name": "James", "department": "A", "managerId": 101},
    {"id": 104, "name": "Amy", "department": "A", "managerId": 101},
    {"id": 105, "name": "Anne", "department": "A", "managerId": 101},
    {"id": 106, "name": "Ron", "department": "B", "managerId": 101}
]
employee = pd.DataFrame(data)

def find_managers(employee: pd.DataFrame) -> pd.DataFrame:
    direct_reports_count = employee.groupby('managerId')['id'].count().reset_index(name='report_count')
    managers_with_five_reports = direct_reports_count[direct_reports_count['report_count'] >= 5]
    manager = pd.merge(managers_with_five_reports, employee, left_on='managerId', right_on='id', how='inner')
    print(manager)

    return manager[['name']]

print(find_managers(employee))


#607
import pandas as pd

def sales_person(sales_person: pd.DataFrame, company: pd.DataFrame, orders: pd.DataFrame) -> pd.DataFrame:
    red_sales_ids = orders[orders['com_id'].isin(company[company['name'] == 'RED']['com_id'])]['sales_id'].unique()
    non_ordered = sales_person[~sales_person['sales_id'].isin(red_sales_ids)][['name']]
    
    return non_ordered


#1050
import pandas as pd

actor_director = pd.DataFrame({"actor_id" : [1, 1, 1, 1, 1, 2, 2], "director_id" : [1, 1, 1, 2, 2, 1, 1], "timestamp" : [0, 1, 2, 3, 4, 5, 6]})
def actors_directors(actor_director: pd.DataFrame) -> pd.DataFrame:
    res = actor_director.groupby(by = ["actor_id", "director_id"])["timestamp"].agg(len).reset_index()
    return res
print(actors_directors(actor_director))


#1173
import pandas as pd

delivery = pd.DataFrame({"delivery_id" : [1, 2, 3, 4, 5, 6], "customer_id" : [1, 5, 1, 3, 4, 2], "order_date" : ["2019-08-01", "2019-08-02", "2019-08-11", "2019-08-24", "2019-08-21", "2019-08-11"], "customer_pref_delivery_date" : ["2019-08-02", "2019-08-02", "2019-08-11", "2019-08-26", "2019-08-22", "2019-08-13"]})
def food_delivery(delivery: pd.DataFrame) -> pd.DataFrame:
    res = delivery["delivery_id"][delivery.order_date == delivery.customer_pref_delivery_date]
    percentage = len(res) / len(delivery["delivery_id"]) * 100
    return pd.DataFrame({"immediate_percentage" : [percentage]})

print(food_delivery(delivery))


#1280
import pandas as pd
import numpy as np

def students_and_examinations(students: pd.DataFrame, subjects: pd.DataFrame, examinations: pd.DataFrame) -> pd.DataFrame:
    first_merge = students.merge(subjects, how='cross')
    examinations['attended_exams'] = 1

    merged = first_merge.merge(examinations, on =['student_id', 'subject_name'], how='outer').fillna(0)

    grouped = merged.groupby(by=['student_id', 'student_name', 'subject_name'])['attended_exams'].sum().reset_index()
    grouped.loc[grouped['student_name']==0, 'student_name'] = np.nan
    return grouped


#1322
import pandas as pd
import numpy as np

ads = pd.DataFrame({"ad_id" : [1, 2, 3, 5, 1, 2, 3, 1, 2, 1], "user_id" : [1, 2, 3, 5, 7, 7, 5, 4, 11, 2], "action" : ["Clicked", "Clicked", "Viewed", "Ignored", "Ignored", "Viewed", "Clicked", "Viewed", "Viewed", "Clicked"]})
print(ads)
def ad_ctr(ads: pd.DataFrame) -> pd.DataFrame:
    res = ads.groupby(by = "ad_id")["action"].value_counts(normalize=True).unstack(fill_value= 0).reset_index()
    res["ctr"] = 0
    res["ctr"][res["Clicked"] + res["Viewed"] != 0] = res["Clicked"] / (res["Clicked"] + res["Viewed"]) * 100
    res["ad_id"] = np.arange(1, 5)
    res.rename(columns = {"action" : "ad_id"}, inplace=True)
    return res[["ad_id", "ctr"]]
print(ad_ctr(ads))



#1484
import pandas as pd

def categorize_products(activities: pd.DataFrame) -> pd.DataFrame:
    res = activities.groupby("sell_date")["product"].agg("nuinque", lambda x: ",".join(sorted(set(x))))
    res.columns = ["num_sold", "products"]
    return res.reset_index()


#1741
import pandas as pd

employees = pd.DataFrame({"emp_id" : [1, 1, 1, 2, 2], "event_day" : ["2020-11-28", "2020-11-28", "2020-12-03", "2020-11-28", "2020-12-09"], "in_time" : [4, 55, 1, 3, 47], "out_time" : [32, 200, 42, 33, 74]})

def total_time(employees: pd.DataFrame) -> pd.DataFrame:
    res = employees.groupby(by = ["event_day", "emp_id"])[["out_time", "in_time"]].sum().reset_index()
    res["total_time"] = res["out_time"] - res["in_time"]
    res = res.rename(columns = {"event_day" : "day"})
    return res[["day", "emp_id", "total_time"]]
print(total_time(employees))


#1795
import pandas as pd

products = pd.DataFrame({"product_id" : [0, 1], "store1": [95, 70], "store2" : [100, None], "store3": [105, 80]})

def rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:
    modified_table = products.set_index('product_id').stack().reset_index()
    modified_table.columns = ["product_id", "store", "price"]
    return modified_table

print(rearrange_products_table(products))


#2082
import pandas as pd

store = pd.DataFrame({"bill_id" : [6, 8, 4, 11, 13], "customer_id" : [1, 1, 2, 3, 3], "amount" : [549, 834, 394, 657, 257]})
def count_rich_customers(store: pd.DataFrame) -> pd.DataFrame:
    res = store["customer_id"][store["amount"] >= 500].drop_duplicates()
    return pd.DataFrame({"rich_count" : [len(res)]})

print(count_rich_customers(store))


#2356
import pandas as pd

teacher = pd.DataFrame({"teacher_id" : [1, 1, 1, 2, 2, 2, 2], "subject_id" : [2, 2, 3, 1, 2, 3, 4], "dept_id" : [3, 4, 3, 1, 1, 1, 1]})
def count_unique_subjects(teacher: pd.DataFrame) -> pd.DataFrame:
    return teacher.groupby("teacher_id")["subject_id"].nunique().reset_index(name = "count")
print(count_unique_subjects(teacher))


#2738
import pandas as pd
files = pd.DataFrame({"file_name" : ["draft1.txt", "draft2.txt", "draft3.txt"], "content" : ["The stock exchange predicts a bull market which would make many investors happy.", "The stock exchange predicts a bull market which would make many investors happy, but analysts warn of possibility of too much optimism and that in fact we are awaiting a bear market.", "The stock exchange predicts a bull market which would make many investors happy, but analysts warn of possibility of too much optimism and that in fact we are awaiting a bear market. As always predicting the future market is an uncertain game and all investors should follow their instincts and best practices."]})
def count_occurences(files: pd.DataFrame) -> pd.DataFrame:
    bull_count = files["content"].str.contains("bull", case = False).sum()
    bear_count = files["content"].str.contains("bear", case = False).sum()

    return pd.DataFrame({"word" : ["bull", "bear"], "count" : [bull_count, bear_count]})
print(count_occurences(files))