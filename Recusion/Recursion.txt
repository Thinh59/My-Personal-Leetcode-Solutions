class Solution():
    def myPow(self, x, n):
        if n == 0:
            return 1
        if n < 0:
            return 1/self.myPow(x, -n)
        half = self.myPow(x, n // 2)
        if n % 2 == 0:
            return half * half
        
        return x * half * half

class Solution():
    def isPowerOfTwo(self, n: int) -> bool:
        if n == 1:
            return True
        if n < 1:
            return False
        return n % 2 == 0 and self.isPowerOfTwo(n // 2)

class Solution():
    def diffWaysToCompute(self, expression):
        def compute(a, b, op):
            if op == "+":
                return a + b
            if op == "-":
                return a - b
            if op == "*":
                return a * b
        res = []
        for i, char in enumerate(expression):
            if char in {"+", "-", "*"}:
                left = self.diffWaysToCompute(expression[: i])
                right = self.diffWaysToCompute(expression[i + 1:])

                for a in left:
                    for b in right:
                        res.append(compute(a, b, char))
        if not res:
            return [int(expression)]
        
        return res

class Solution():
    def isPowerOfThree(self, n: int) -> bool:
        if n == 1:
            return True
        if n < 1:
            return False
        return n % 3 == 0 and self.isPowerOfThree(n // 3)


class Solution():
    def lastRemaining(self, n):
        if n == 1:
            return 1
        return 2 * (n // 2 + 1 - self.lastRemaining(n // 2))

class Solution():
    def predictTheWinner(self, nums):
        """
        Input: nums = [1,5,2]
        Output: false
        Explanation: Initially, player 1 can choose between 1 and 2. 
        If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
        So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
        Hence, player 1 will never be the winner and you need to return false.
        """
        def score(i, j):
            return (i <= j) and max(
                nums[i] - score(i + 1, j), 
                nums[j] - score(i, j - 1)
            )
        return len(nums) % 2 == 0 or score(0, len(nums) - 1) >= 0

class Solution():
    def kthGrammar(self, n: int, k: int) -> int:
        if n == 1:
            return 0
        length = 2 ** (n - 1)
        half = length // 2
        if k <= half:
            return self.kthGrammar(n - 1, k)
        else:
            return self.kthGrammar(n - 1, k - half) ^ 1 #XOR vá»›i 1

class Solution():
    def findTheWinner(self, n: int, k: int) -> int:
        def findIndex(n, k):
            if n == 1:
                return 0
            else:
                return (findIndex(n - 1, k) + k) % n
        return findIndex(n, k) + 1

